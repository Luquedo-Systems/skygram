{"version":3,"sources":["webpack:///./src/components/post-detail.js","webpack:///./src/templates/post-page.js"],"names":["PostDetail","render","this","props","post","bigImage","likes","id","username","weeksAgo","text","avatar","big","childImageSharp","PostDetails","css","scale","lineHeight","typography","options","baseLineHeight","marginBottom","rhythm","overflow","data-testid","float","color","onClick","e","stopPropagation","background","display","alignItems","flexDirection","width","presets","Tablet","marginTop","padding","paddingBottom","borderBottom","src","alt","borderRadius","height","margin","marginRight","to","backgroundColor","flex","position","flexShrink","key","srcSet","fluid","verticalAlign","top","bottom","left","right","React","Component","PostTemplate","isModal","window","___GATSBYGRAM_INITIAL_RENDER_COMPLETE","location","data","pageQuery"],"mappings":"iLAKMA,E,kGACJC,OAAA,WAAU,IAAD,UASHC,KAAKC,MAAMC,KAPbC,EAFK,EAELA,SACAC,EAHK,EAGLA,MACAC,EAJK,EAILA,GACAC,EALK,EAKLA,SACAC,EANK,EAMLA,SACAC,EAPK,EAOLA,KACAC,EARK,EAQLA,OAGMC,EAAQP,EAASQ,gBAAjBD,IAmCFE,EAAc,kBAClB,uBACEC,IAAG,iBACEC,aAAM,IADR,CAEDC,WAAYC,IAAWC,QAAQC,kBAGjC,uBACEL,IAAK,CACHM,aAAcC,YAAO,GACrBC,SAAS,WAGX,0BACEC,cAAY,oBACZT,IAAK,CACHU,MAAM,SAGPnB,EANH,UAQA,0BACES,IAAK,CACHW,MAAM,kBACND,MAAM,UAGPhB,EANH,MASF,uBAAKe,cAAY,oBACf,8BAAShB,GADX,IAC+BE,KAKnC,OACE,uBACEiB,QAAS,SAAAC,GAAC,OAAIA,EAAEC,mBAChBd,KAAG,GACDe,WAAW,QACXC,QAAQ,OACRC,WAAW,UACXC,cAAc,SACdC,MAAM,QALL,EAMAC,IAAQC,QAAS,CAChBH,cAAc,cACdI,UAAWf,YAAO,IARnB,IAYH,uBACEP,KAAG,GACDuB,QAAShB,YAAO,EAAI,GACpBiB,cAAe,GAFd,EAGAJ,IAAQC,QAAS,CAChBF,MAAOZ,YAAO,IACdgB,QAAShB,YAAO,IALjB,IASH,iBA9FU,wBACd,uBACEP,KAAG,OACAoB,IAAQC,QAAS,CAChBf,aAAa,QAASC,YAAO,EAAI,GAArB,UACZkB,aAAa,6BAHd,IAOH,uBACEhB,cAAY,qBACZiB,IAAK9B,EACL+B,IAAKlC,EACLO,IAAK,CACH4B,aAAa,OACbC,OAAQ,GACRnB,MAAM,OACNoB,OAAQ,EACRC,YAAaxB,YAAO,OAGxB,sBACEE,cAAY,uBACZT,IAAK,CACHE,WAAYK,YAAO,GACnBD,aAAcC,YAAO,EAAI,KAG1Bd,MAkED,MACA,uBACEO,KAAG,GACDgB,QAAQ,QADP,EAEAI,IAAQC,QAAS,CAChBL,QAAQ,SAHT,IAOH,gBAACjB,EAAD,QAGJ,uBACEiC,GAAE,IAAMxC,EAAN,IACFQ,IAAK,CACHgB,QAAQ,QACRiB,gBAAgB,YAChBC,KAAK,SACLf,MAAM,OACNgB,SAAS,aAGX,uBACEnC,IAAK,CACHkB,cAAc,SACdkB,WAAY,EACZD,SAAS,WACTX,cAAc,OACdhB,SAAS,WAGX,uBACEmB,IAAG,GACHU,IAAKxC,EAAI6B,IACTA,IAAK7B,EAAI6B,IACTY,OAAQzC,EAAIyC,OACZC,MAAM,kCACNvC,IAAK,CACH8B,OAAQ,EACRD,OAAO,OACPV,MAAM,OACNqB,cAAc,WACdL,SAAS,WACTM,IAAK,EACLC,OAAQ,EACRC,KAAM,EACNC,MAAO,KAGX,uBACE5C,IAAK,CACHkB,cAAc,SACdkB,WAAY,EACZD,SAAS,WACTM,IAAK,EACLC,OAAQ,EACRC,KAAM,EACNC,MAAO,OAKf,uBACE5C,KAAG,GACDe,WAAW,QACXQ,QAAShB,YAAO,EAAI,GACpBS,QAAQ,SAHP,EAIAI,IAAQC,QAAS,CAChBL,QAAQ,QALT,IASH,gBAACjB,EAAD,S,GApLe8C,IAAMC,WA2LhB7D,Q,oLC1LT8D,E,kGAMJ7D,OAAA,WACE,IAAI8D,GAAU,EAWd,MALE,oBAAOC,QACPA,OAAOC,wCAEPF,GAAU,GAGV,gBAAC,IAAD,CAAQG,SAAUhE,KAAKC,MAAM+D,SAAUH,QAASA,GAC9C,gBAAC,IAAD,CAAY3D,KAAMF,KAAKC,MAAMgE,KAAK/D,S,GApBfwD,IAAMC,WA0BlBC,YAQR,IAAMM,EAAS,c","file":"component---src-templates-post-page-js-f64f02ab282f3bda80e6.js","sourcesContent":["import React from \"react\"\nimport presets from \"../utils/presets\"\nimport typography, { rhythm, scale } from \"../utils/typography\"\nimport { graphql } from \"gatsby\"\n\nclass PostDetail extends React.Component {\n  render() {\n    const {\n      bigImage,\n      likes,\n      id,\n      username,\n      weeksAgo,\n      text,\n      avatar,\n    } = this.props.post\n\n    const { big } = bigImage.childImageSharp\n\n    const UserBar = () => (\n      <div\n        css={{\n          [presets.Tablet]: {\n            marginBottom: `calc(${rhythm(3 / 4)} + 1px)`,\n            borderBottom: `1px solid rgba(0,0,0,0.1)`,\n          },\n        }}\n      >\n        <img\n          data-testid=\"post-detail-avatar\"\n          src={avatar}\n          alt={username}\n          css={{\n            borderRadius: `100%`,\n            height: 25,\n            float: `left`,\n            margin: 0,\n            marginRight: rhythm(1 / 2),\n          }}\n        />\n        <h5\n          data-testid=\"post-detail-username\"\n          css={{\n            lineHeight: rhythm(1),\n            marginBottom: rhythm(3 / 4),\n          }}\n        >\n          {username}\n        </h5>\n      </div>\n    )\n\n    const PostDetails = () => (\n      <div\n        css={{\n          ...scale(-2 / 5),\n          lineHeight: typography.options.baseLineHeight,\n        }}\n      >\n        <div\n          css={{\n            marginBottom: rhythm(1),\n            overflow: `hidden`,\n          }}\n        >\n          <strong\n            data-testid=\"post-detail-likes\"\n            css={{\n              float: `left`,\n            }}\n          >\n            {likes} likes\n          </strong>\n          <strong\n            css={{\n              color: `rgba(0,0,0,0.4)`,\n              float: `right`,\n            }}\n          >\n            {weeksAgo}w\n          </strong>\n        </div>\n        <div data-testid=\"post-detail-text\">\n          <strong>{username}</strong> {text}\n        </div>\n      </div>\n    )\n\n    return (\n      <div\n        onClick={e => e.stopPropagation()}\n        css={{\n          background: `white`,\n          display: `flex`,\n          alignItems: `stretch`,\n          flexDirection: `column`,\n          width: `100%`,\n          [presets.Tablet]: {\n            flexDirection: `row-reverse`,\n            marginTop: rhythm(1),\n          },\n        }}\n      >\n        <div\n          css={{\n            padding: rhythm(3 / 4),\n            paddingBottom: 0,\n            [presets.Tablet]: {\n              width: rhythm(13),\n              padding: rhythm(1),\n            },\n          }}\n        >\n          <UserBar />\n          <div\n            css={{\n              display: `none`,\n              [presets.Tablet]: {\n                display: `block`,\n              },\n            }}\n          >\n            <PostDetails />\n          </div>\n        </div>\n        <div\n          to={`/${id}/`}\n          css={{\n            display: `block`,\n            backgroundColor: `lightgray`,\n            flex: `1 0 0%`,\n            width: `100%`,\n            position: `relative`,\n          }}\n        >\n          <div\n            css={{\n              flexDirection: `column`,\n              flexShrink: 0,\n              position: `relative`,\n              paddingBottom: `100%`,\n              overflow: `hidden`,\n            }}\n          >\n            <img\n              alt={``}\n              key={big.src}\n              src={big.src}\n              srcSet={big.srcSet}\n              fluid=\"(min-width: 640px) 640px, 100vw\"\n              css={{\n                margin: 0,\n                height: `100%`,\n                width: `100%`,\n                verticalAlign: `baseline`,\n                position: `absolute`,\n                top: 0,\n                bottom: 0,\n                left: 0,\n                right: 0,\n              }}\n            />\n            <div\n              css={{\n                flexDirection: `column`,\n                flexShrink: 0,\n                position: `absolute`,\n                top: 0,\n                bottom: 0,\n                left: 0,\n                right: 0,\n              }}\n            />\n          </div>\n        </div>\n        <div\n          css={{\n            background: `white`,\n            padding: rhythm(3 / 4),\n            display: `block`,\n            [presets.Tablet]: {\n              display: `none`,\n            },\n          }}\n        >\n          <PostDetails />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default PostDetail\n\nexport const postDetailFragment = graphql`\n  fragment PostDetail_details on Post {\n    # Specify the fields from the post we need.\n    username\n    avatar\n    likes\n    id\n    text\n    # Date fields have special arguments. This one computes\n    # how many weeks have passed since the post was created.\n    # All calculations like this (like all GraphQL query\n    # activity) happens at build-time! So has minimal cost\n    # for the client.\n    weeksAgo: time(difference: \"weeks\")\n    bigImage: image {\n      childImageSharp {\n        # Here we query for *multiple* image thumbnails to be\n        # created. So with no effort on our part, 100s of\n        # thumbnails are created. This makes iterating on\n        # designs effortless as we change the args\n        # for the query and we get new thumbnails.\n        big: fluid(maxWidth: 640) {\n          src\n          srcSet\n        }\n      }\n    }\n  }\n`\n","import * as PropTypes from \"prop-types\"\nimport React from \"react\"\nimport { graphql } from \"gatsby\"\nimport PostDetail from \"../components/post-detail\"\nimport Layout from \"../layouts\"\n\nclass PostTemplate extends React.Component {\n  static propTypes = {\n    data: PropTypes.shape({\n      post: PropTypes.object.isRequired,\n    }),\n  }\n  render() {\n    let isModal = false\n    // We don't want to show the modal if a user navigates\n    // directly to a post so if this code is running on Gatsby's\n    // initial render then we don't show the modal, otherwise we\n    // do.\n    if (\n      typeof window !== `undefined` &&\n      window.___GATSBYGRAM_INITIAL_RENDER_COMPLETE\n    ) {\n      isModal = true\n    }\n    return (\n      <Layout location={this.props.location} isModal={isModal}>\n        <PostDetail post={this.props.data.post} />\n      </Layout>\n    )\n  }\n}\n\nexport default PostTemplate\n\n// The post template's GraphQL query. Notice the “id”\n// variable which is passed in. We set this on the page\n// context in gatsby-node.js.\n//\n// All GraphQL queries in Gatsby are run at build-time and\n// loaded as plain JSON files so have minimal client cost.\nexport const pageQuery = graphql`\n  query($id: String!) {\n    # Select the post which equals this id.\n    post(id: { eq: $id }) {\n      ...PostDetail_details\n    }\n  }\n`\n"],"sourceRoot":""}